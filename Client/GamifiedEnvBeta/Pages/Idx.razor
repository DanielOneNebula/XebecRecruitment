@page "/login"
@inject IJSRuntime jsr
@inject HttpClient httpClient
@using XebecPortal.Shared.Security
@inject NavigationManager NavManager
@inject State State

<style>
    .valid.modified:not([type=checkbox]) {
        outline: none;
        border-radius: 55px;
        padding-left: 0.4rem;
    }

    .invalid {
        outline: 1px solid red;
        border-radius: 55px;
    }

    .validation-message {
        color: red;
        list-style: none;
        text-decoration: none;
    }


    .container-main {
        position: relative;
        width: 100%;
        min-height: 100vh;
        background-color: #fff;
        overflow: hidden;
    }

        .container-main:before {
            content: '';
            position: absolute;
            width: 2000px;
            height: 2000px;
            border-radius: 50%;
            background: linear-gradient(-45deg, #00BCAE, #44c1e6);
            top: -10%;
            right: 48%;
            transform: translateY(-50%);
            z-index: 6;
            transition: 1.8s ease-in-out;
        }


    .forms-container {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
    }


    .signin-signup {
        position: absolute;
        top: 50%;
        left: 75%;
        transform: translate(-50%, -50%);
        width: 50%;
        display: grid;
        grid-template-columns: 1fr;
        z-index: 5;
        transition: 1s 0.7s ease-in-out;
    }

    form {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        padding: 0 5rem;
        overflow: hidden;
        grid-column: 1 / 2;
        grid-row: 1 / 2;
        transition: 0.2s 0.7s ease-in-out;
    }

    form.sign-in-form {
        z-index: 2;
    }

    form.sign-up-form {
        z-index: 1;
        opacity: 0;
    }

    .title {
        font-size: 2.2rem;
        color: #444;
        margin-bottom: 10px;
    }

    .input-field {
        max-width: 380px;
        width: 100%;
        height: 55px;
        background-color: #f0f0f0;
        margin: 10px 0;
        border-radius: 55px;
        display: grid;
        grid-template-columns: 15% 85%;
        padding: 0 0.4rem;
    }

    .input-field i {
        text-align: center;
        line-height: 55px;
        color: #acacac;
        font-size: 1.1rem;
    }

    .input-field input,
    ::deep input {
        background: none;
        outline: none;
        border: none;
        line-height: 1;
        font-weight: 600;
        font-size: 1.1rem;
        color: #333;
    }

    .input-field input::placeholder {
        color: #aaa;
        font-weight: 500;
    }

    .btn {
        width: 150px;
        height: 49px;
        border: none;
        outline: none;
        border-radius: 49px;
        color: #fff;
        cursor: pointer;
        background-color: #44c1e6; /**/
        text-transform: uppercase;
        font-weight: 600;
        margin: 10px 0;
        transition: 0.5s;
    }

        .btn:hover {
            background-color: #00BCAE;
        }


    .social-text {
        padding: 0.7rem 0;
        font-size: 1rem;
    }

    .social-media {
        display: flex;
        justify-content: center;
    }

    .social-icon {
        width: 46px;
        height: 46px;
        border: 1px solid #333;
        margin: 0 0.45rem;
        display: flex;
        justify-content: center;
        align-items: center;
        text-decoration: none;
        color: #333;
        font-size: 1.1rem;
        border-radius: 50%;
        transition: 0.3s;
        cursor: pointer;
    }

        .social-icon:hover {
            color: #00BCAE;
            border-color: #00BCAE;
        }


    .panels-container {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
    }

    .panel {
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        justify-content: space-around;
        text-align: center;
        z-index: 7;
    }

    .left-panel {
        pointer-events: all;
        padding: 3rem 17% 2rem 12%;
    }

    .right-panel {
        pointer-events: none;
        padding: 3rem 12% 2rem 17%;
    }

    .panel .content {
        color: #fff;
        transition: 0.9s 0.6s ease-in-out;
    }

    .panel h3 {
        font-weight: 600;
        font-size: 1.5rem;
        line-height: 1;
    }

    .panel p {
        font-size: 0.95rem;
        padding: 0.7rem 0;
    }

    .btn.transparent {
        margin: 0;
        background: none;
        border: 2px solid #fff;
        width: 130px;
        height: 41px;
        font-weight: 600;
        font-size: 0.8rem;
    }

    .image {
        width: 100%;
        transition: 1.1s 0.4s ease-in-out;
    }

    .right-panel .content,
    .right-panel .image {
        transform: translateX(800px);
    }

    /*ANIMATIONS*/
    .container-main.sign-up-mode:before {
        transform: translate(100%, -50%);
        right: 52%;
    }

    .container-main.sign-up-mode .left-panel .image,
    .container-main.sign-up-mode .left-panel .content {
        transform: translateX(-800px);
    }

    .container-main.sign-up-mode .right-panel .content,
    .container-main.sign-up-mode .right-panel .image {
        transform: translateX(0px);
    }

    .container-main.sign-up-mode .left-panel {
        pointer-events: none;
    }

    .container-main.sign-up-mode .right-panel {
        pointer-events: all;
    }

    .container-main.sign-up-mode .signin-signup {
        left: 25%;
    }

    .container-main.sign-up-mode form.sign-in-form {
        z-index: 1;
        opacity: 0;
    }

    .container-main.sign-up-mode form.sign-up-form {
        z-index: 2;
        opacity: 1;
    }


    /*RESPONSIVE*/

    @@media (max-width: 870px) {
        .container-main {
            min-height: 800px;
            height: 100vh;
        }

        .container-main::before {
            width: 1500px;
            height: 1500px;
            left: 30%;
            bottom: 68%;
            transform: translateX(-50%);
            right: initial;
            top: initial;
            transition: 2s ease-in-out;
        }

        .signin-signup {
            width: 100%;
            left: 50%;
            top: 95%;
            transform: translate(-50%, -100%);
            transition: 1s 0.8s ease-in-out;
        }


        .panels-container {
            grid-template-columns: 1fr;
            grid-template-rows: 1fr 2fr 1fr;
        }

        .panel {
            flex-direction: row;
            justify-content: space-around;
            align-items: center;
            padding: 2.5rem 8%;
        }

        .panel .content {
            padding-right: 15%;
            transition: 0.9s 0.8s ease-in-out;
        }

        .panel p {
            font-size: 0.7rem;
            padding: 0.5rem 0;
        }

        .panel h3 {
            font-size: 1.2rem;
        }

        .btn.transparent {
            width: 110px;
            height: 35px;
            font-size: 0.7rem;
        }

        .image {
            width: 200px;
            transition: 0.9s 0.6s ease-in-out;
        }

        .left-panel {
            grid-row: 1 / 2;
        }

        .right-panel {
            grid-row: 3/4;
        }

        .right-panel .content,
        .right-panel .image {
            transform: translateY(300px);
        }

        .container-main.sign-up-mode:before {
            transform: translate(-50%, 100%);
            bottom: 32%;
            right: initial;
        }

        .container-main.sign-up-mode .left-panel .image,
        .container-main.sign-up-mode .left-panel .content {
            transform: translateY(-300px);
        }

        .container-main.sign-up-mode .signin-signup {
            top: 5%;
            transform: translate(-50%, 0);
            left: 50%;
        }

    }

    @@media (max-width: 570px) {
        form {
            padding: 0 1.5rem;
        }

        .image {
            display: none;
        }

        .panel .content {
            padding: 0.5rem 1rem;
        }

        .container-main::before {
            bottom: 72%;
            left: 50%;
        }

        .container-main.sign-up-mode::before {
            bottom: 28%;
            left: 50%;
        }

    }

  </style>


<div class="container-main">

    <div class="forms-container">

        <div class="signin-signup">

            <!-- sign in -->
            <EditForm Model="user" OnValidSubmit="OnValidLogin" action="" class="sign-in-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p>@LoginMessage</p>

                <h2 class="title">Sign In</h2>

                <div class="input-field">
                    <i class="fas fa-envelope"></i>
                    <InputText @bind-Value="user.Email" placeholder="Email"></InputText>
                </div>

                <div class="input-field">
                    <i class="fas fa-lock"></i>
                    <InputText @bind-Value="user.Password" type="password" placeholder="Password"></InputText>
                </div>

                <input type="submit" value="Login" class="btn solid" disabled="@isDisabledLogin">

                <p class="social-text">Or sign in with social media</p>
                <div class="social-media">

                    <a href="#" class="social-icon">
                        <i class="fab fa-github" @onclick="GitHubSignIn"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="TwitterSignIn">
                        <i class="fab fa-twitter"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="GoogleSignIn">
                        <i class="fab fa-google"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="LinkedInSignIn">
                        <i class="fab fa-linkedin-in"></i>
                    </a>

                </div>

            </EditForm>

            <!-- sign up -->
            <EditForm Model="reg" OnValidSubmit="OnValidReg" action="" class="sign-up-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p>@RegisterMessage</p>

                <h2 class="title">Sign Up</h2>

                <div class="input-field">
                    <i class="fas fa-envelope"></i>
                    <InputText @bind-Value="reg.Email" placeholder="Email"></InputText>
                </div>

                <div class="input-field">
                    <i class="fas fa-lock"></i>
                    <InputText @bind-Value="reg.Password" type="password" placeholder="Password"></InputText>
                </div>

                <div class="input-field">
                    <i class="fas fa-lock"></i>
                    <InputText @bind-Value="reg.ConfirmPassword" type="password" placeholder="Confirm Password">
                    </InputText>
                </div>

                <input type="submit" value="Register" class="btn solid" disabled="@isDisabledRegsiter">

                <p class="social-text">Or sign up with social media</p>
                <div class="social-media">

                    <a href="#" class="social-icon" @onclick="GitHubSignIn">
                        <i class="fab fa-github"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="TwitterSignIn">
                        <i class="fab fa-twitter"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="GoogleSignIn">
                        <i class="fab fa-google"></i>
                    </a>
                    <a href="#" class="social-icon" @onclick="LinkedInSignIn">
                        <i class="fab fa-linkedin-in"></i>
                    </a>

                </div>

            </EditForm>

        </div>

    </div>


    <div class="panels-container">

        <div class="panel left-panel">

            <div class="content">
                <h3>New here?</h3>
                <p>Sign Up, Apply, Get Hired</p>
                <button class="btn transparent btn-new" id="sign-up-btn">Sign up</button>
            </div>

            <img src="img/log.svg" alt="" class="image">

        </div>

        <div class="panel right-panel">

            <div class="content">
                <h3>One of us?</h3>
                <p>We connect thoroughly vetted candidates to suitable organizations</p>
                <button class="btn transparent btn-new" id="sign-in-btn">Sign in</button>
            </div>

            <img src="img/register.svg" alt="" class="image">

        </div>


    </div>

</div>

@code {

    /*login specific*/
    LoginModel user = new LoginModel();
    bool IsSuccessful = false;
    bool isDisabledLogin = false;
    string LoginMessage = string.Empty;



    /*register specific*/
    RegisterModel reg = new RegisterModel();
    string RegisterMessage = string.Empty;
    string RegisterLogin = string.Empty;
    bool isDisabledRegsiter = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsr.InvokeVoidAsync("initializeLogin");

        reg.Role = "HRAdmin";
    }

    //login

    private async Task OnValidLogin()
    {

        isDisabledLogin = true;
        using (var msg = await httpClient.PostAsJsonAsync<LoginModel>("/api/auth/login", user,
        System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
                LoginMessage = result.Message;
                isDisabledLogin = false;
                if (result.Success)
                {
                    State.Id = result.Id;
                    State.UserEmail = result.Email;
                    State.Role = result.Role;

                    await jsr.InvokeVoidAsync("localStorage.setItem", "user",
                    $"{result.Email};{result.Role};{result.JwtBearer};{result.Id}").ConfigureAwait(false);

                    LoginHelper loginHelper = new LoginHelper();
                    loginHelper.TimeDateLogin = DateTime.Now;
                    loginHelper.TimeDateLogOut = DateTime.Now;
                    loginHelper.AppUserId = result.Id;
                    await httpClient.PostAsJsonAsync("/api/LoginHelper", loginHelper);

                    NavManager.NavigateTo("/profile_");

                }
            }
        }

    }


    //register
    private async Task OnValidReg()
    {
        //TODO: Check for duplicate emails in db first before registering new account

        isDisabledRegsiter = true;
        using (var msg = await httpClient.PostAsJsonAsync<RegisterModel>("/api/auth/register", reg,
        System.Threading.CancellationToken.None))
        {
            if (msg.IsSuccessStatusCode)
            {
                LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
                RegisterMessage = result.Message;
                if (result.Success)
                {
                    RegisterHelper registerHelper = new RegisterHelper();
                    registerHelper.TimeDateOfRegistration = DateTime.Now;
                    registerHelper.AppUserId = result.AppUserId;
                    await httpClient.PostAsJsonAsync("/api/RegisterHelper", registerHelper);

                    RegisterMessage += " Please Sign In to continue.";
                    @* RegisterLogin = "Click here to LOGIN."; *@
                }
                else
                    isDisabledRegsiter = false;
            }
        }

    }

    /*OAuth*/
    private void GoogleSignIn()
    {
        NavManager.NavigateTo("api/ThirdPartyUser/GoogleSignIn", true);
    }

    private void GitHubSignIn()
    {
        NavManager.NavigateTo("api/ThirdPartyUser/GitHubSignIn", true);
    }

    private void TwitterSignIn()
    {
        NavManager.NavigateTo("api/ThirdPartyUser/TwitterSignIn", true);
    }

    private void LinkedInSignIn()
    {
        NavManager.NavigateTo("api/ThirdPartyUser/LinkedInSignIn", true);
    }

}